// <auto-generated />
using System;
using Persistence;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Persistence.Migrations
{
    [DbContext(typeof(DatabaseContext))]
    [Migration("20220101211014_Initial")]
    partial class Initial
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.13")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Models.Entities.ApplicationVersions", b =>
                {
                    b.Property<Guid?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Link")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("PublishDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("getutcdate()");

                    b.Property<string>("Version")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("ApplicationVersions", "LE");

                    b.HasData(
                        new
                        {
                            Id = new Guid("880907b6-5037-4c45-b87f-1f5f547b4468"),
                            Link = "none",
                            PublishDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Version = "1.0.0.0"
                        });
                });

            modelBuilder.Entity("Models.Entities.CompleteResult", b =>
                {
                    b.Property<Guid?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("CorrectAnswersCount")
                        .HasColumnType("int");

                    b.Property<int>("IncorrectAnswersCount")
                        .HasColumnType("int");

                    b.Property<int>("QuestionsCount")
                        .HasColumnType("int");

                    b.Property<int>("UnanswerCount")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("CompleteResult");
                });

            modelBuilder.Entity("Models.Entities.Exams", b =>
                {
                    b.Property<Guid?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CompleteResultId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("PocessingExamDate")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("FORMAT (getutcdate(), 'yyyy-MM-dd')");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("CompleteResultId");

                    b.HasIndex("UserId");

                    b.ToTable("Exams");
                });

            modelBuilder.Entity("Models.Entities.Notifications", b =>
                {
                    b.Property<Guid?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Direction")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(max)")
                        .HasDefaultValue("ltr");

                    b.Property<string>("From")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<bool>("IsRead")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("SentDate")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("getutcdate()");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Notifications", "LE");
                });

            modelBuilder.Entity("Models.Entities.PrimitiveResult", b =>
                {
                    b.Property<Guid?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CorrectAnswer")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("ExamsId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsCorrect")
                        .HasColumnType("bit");

                    b.Property<bool>("IsUnanswer")
                        .HasColumnType("bit");

                    b.Property<string>("Question")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("YourAnswer")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ExamsId");

                    b.ToTable("PrimitiveResult");
                });

            modelBuilder.Entity("Models.Entities.Roles", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("RoleName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Roles", "LE");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            RoleName = "Admin"
                        },
                        new
                        {
                            Id = 2,
                            RoleName = "Vip"
                        },
                        new
                        {
                            Id = 3,
                            RoleName = "User"
                        });
                });

            modelBuilder.Entity("Models.Entities.Ticket", b =>
                {
                    b.Property<Guid?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Method")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("SentDate")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("getutcdate()");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Ticket", "LE");
                });

            modelBuilder.Entity("Models.Entities.UserLogins", b =>
                {
                    b.Property<Guid?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedByIp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Expires")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("RefreshToken")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UserLogins", "LE");
                });

            modelBuilder.Entity("Models.Entities.Users", b =>
                {
                    b.Property<Guid?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("Password")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PhoneNumber")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0)
                        .HasColumnName("UserPhoneNumber");

                    b.Property<int>("RoleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(3);

                    b.Property<Guid?>("SecurityStamp")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("TimeRegistered")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getutcdate()");

                    b.Property<DateTime?>("TimeUpdated")
                        .HasColumnType("datetime2");

                    b.Property<string>("Username")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasIndex("RoleId");

                    b.ToTable("Users", "LE");
                });

            modelBuilder.Entity("Models.Entities.VerbTenses", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Tense")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("VerbTenses", "LE");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Tense = "None"
                        },
                        new
                        {
                            Id = 2,
                            Tense = "Present Simple"
                        },
                        new
                        {
                            Id = 3,
                            Tense = "Present Continuous"
                        },
                        new
                        {
                            Id = 4,
                            Tense = "Present Perfect"
                        },
                        new
                        {
                            Id = 5,
                            Tense = "Present Perfect Continuous"
                        },
                        new
                        {
                            Id = 6,
                            Tense = "Past Simple"
                        },
                        new
                        {
                            Id = 7,
                            Tense = "Past Continuous"
                        },
                        new
                        {
                            Id = 8,
                            Tense = "Past Perfect"
                        },
                        new
                        {
                            Id = 9,
                            Tense = "Past Perfect Continuous"
                        },
                        new
                        {
                            Id = 10,
                            Tense = "Future Simple"
                        },
                        new
                        {
                            Id = 11,
                            Tense = "Future Continuous"
                        },
                        new
                        {
                            Id = 12,
                            Tense = "Future Perfect"
                        },
                        new
                        {
                            Id = 13,
                            Tense = "Future Perfect Continuous"
                        },
                        new
                        {
                            Id = 14,
                            Tense = "Future Simple in the Past"
                        },
                        new
                        {
                            Id = 15,
                            Tense = "Future Continuous in the Past"
                        },
                        new
                        {
                            Id = 16,
                            Tense = "Future Perfect in the Past"
                        },
                        new
                        {
                            Id = 17,
                            Tense = "Future Perfect Continuous in the Past"
                        });
                });

            modelBuilder.Entity("Models.Entities.WordTypes", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("WordTypes", "LE");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Type = "Noun"
                        },
                        new
                        {
                            Id = 2,
                            Type = "Letters"
                        },
                        new
                        {
                            Id = 3,
                            Type = "Pronoun"
                        },
                        new
                        {
                            Id = 4,
                            Type = "Adverb"
                        },
                        new
                        {
                            Id = 5,
                            Type = "Verb"
                        },
                        new
                        {
                            Id = 6,
                            Type = "Adjective"
                        });
                });

            modelBuilder.Entity("Models.Entities.Words", b =>
                {
                    b.Property<Guid?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("EditDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("EnglishTranslation")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsVerb")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LearningDate")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("getutcdate()");

                    b.Property<string>("PersianTranslation")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Source")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("VerbTenseId")
                        .HasColumnType("int");

                    b.Property<string>("Word")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("WordTypeId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.HasIndex("VerbTenseId");

                    b.HasIndex("WordTypeId");

                    b.ToTable("Words", "LE");
                });

            modelBuilder.Entity("Models.Entities.Exams", b =>
                {
                    b.HasOne("Models.Entities.CompleteResult", "CompleteResult")
                        .WithMany()
                        .HasForeignKey("CompleteResultId");

                    b.HasOne("Models.Entities.Users", "User")
                        .WithMany("Exams")
                        .HasForeignKey("UserId");

                    b.Navigation("CompleteResult");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Models.Entities.Notifications", b =>
                {
                    b.HasOne("Models.Entities.Users", "User")
                        .WithMany("Notifications")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Models.Entities.PrimitiveResult", b =>
                {
                    b.HasOne("Models.Entities.Exams", null)
                        .WithMany("PrimitiveResults")
                        .HasForeignKey("ExamsId");
                });

            modelBuilder.Entity("Models.Entities.Ticket", b =>
                {
                    b.HasOne("Models.Entities.Users", "User")
                        .WithMany("Tickets")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Models.Entities.UserLogins", b =>
                {
                    b.HasOne("Models.Entities.Users", "User")
                        .WithMany("UserLogins")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Models.Entities.Users", b =>
                {
                    b.HasOne("Models.Entities.Roles", "Role")
                        .WithMany("Users")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");
                });

            modelBuilder.Entity("Models.Entities.Words", b =>
                {
                    b.HasOne("Models.Entities.Users", "User")
                        .WithMany("Words")
                        .HasForeignKey("UserId");

                    b.HasOne("Models.Entities.VerbTenses", "VerbTense")
                        .WithMany("Words")
                        .HasForeignKey("VerbTenseId");

                    b.HasOne("Models.Entities.WordTypes", "WordType")
                        .WithMany("Words")
                        .HasForeignKey("WordTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");

                    b.Navigation("VerbTense");

                    b.Navigation("WordType");
                });

            modelBuilder.Entity("Models.Entities.Exams", b =>
                {
                    b.Navigation("PrimitiveResults");
                });

            modelBuilder.Entity("Models.Entities.Roles", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("Models.Entities.Users", b =>
                {
                    b.Navigation("Exams");

                    b.Navigation("Notifications");

                    b.Navigation("Tickets");

                    b.Navigation("UserLogins");

                    b.Navigation("Words");
                });

            modelBuilder.Entity("Models.Entities.VerbTenses", b =>
                {
                    b.Navigation("Words");
                });

            modelBuilder.Entity("Models.Entities.WordTypes", b =>
                {
                    b.Navigation("Words");
                });
#pragma warning restore 612, 618
        }
    }
}
